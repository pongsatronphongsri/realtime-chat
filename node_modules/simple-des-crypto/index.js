"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tac = require("type-array-convert");
var cryptoType;
(function (cryptoType) {
    cryptoType[cryptoType["encrypt"] = 0] = "encrypt";
    cryptoType[cryptoType["decrypt"] = 1] = "decrypt";
})(cryptoType || (cryptoType = {}));
var DES = (function () {
    function DES(key) {
        var _this = this;
        this.blockSize = 8;
        this.keys = new Uint32Array(16 * 2);
        this.pc1 = function (inBuf) {
            var outL = 0;
            var outR = 0;
            var i;
            for (i = 7; i >= 5; i -= 1) {
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inBuf[1] >> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inBuf[0] >> (j + i)) & 1;
                }
            }
            for (var j = 0; j <= 24; j += 8) {
                outL <<= 1;
                outL |= (inBuf[1] >> (j + i)) & 1;
            }
            for (i = 1; i <= 3; i += 1) {
                for (var j = 0; j <= 24; j += 8) {
                    outR <<= 1;
                    outR |= (inBuf[1] >> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outR <<= 1;
                    outR |= (inBuf[0] >> (j + i)) & 1;
                }
            }
            for (var j = 0; j <= 24; j += 8) {
                outR <<= 1;
                outR |= (inBuf[0] >> (j + i)) & 1;
            }
            return new Uint32Array([outL >>> 0, outR >>> 0]);
        };
        this.r28shl = function (num, shift) {
            return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
        };
        this.pc2 = function (inBuf) {
            var outL = 0;
            var outR = 0;
            var pc2table = new Uint8Array([
                14, 11, 17, 4, 27, 23, 25, 0,
                13, 22, 7, 18, 5, 9, 16, 24,
                2, 20, 12, 21, 1, 8, 15, 26,
                15, 4, 25, 19, 9, 1, 26, 16,
                5, 11, 23, 8, 12, 7, 17, 0,
                22, 3, 10, 14, 6, 20, 27, 24,
            ]);
            var len = pc2table.length >>> 1;
            for (var i = 0; i < len; i += 1) {
                outL <<= 1;
                outL |= (inBuf[0] >>> pc2table[i]) & 0x1;
            }
            for (var i = len; i < pc2table.length; i += 1) {
                outR <<= 1;
                outR |= (inBuf[1] >>> pc2table[i]) & 0x1;
            }
            return new Uint32Array([outL >>> 0, outR >>> 0]);
        };
        this.encrypt = function (data) {
            return _this.update(data, cryptoType.encrypt);
        };
        this.decrypt = function (data) {
            return _this.update(data, cryptoType.decrypt);
        };
        this.update = function (data, type) {
            if (data.length === 0) {
                return new Uint8Array(0);
            }
            if (data.length % _this.blockSize !== 0) {
                throw new Error('Invalid data length');
            }
            var in32 = tac.uint8toUint32(data);
            var out = new Uint32Array(in32.length);
            for (var i = 0; i < in32.length; i += 2) {
                out.set(_this.update64bit(in32.slice(i, i + 2), type), i);
            }
            return tac.uint32toUint8(out);
        };
        this.update64bit = function (inp, type) {
            var inBuf = _this.ip(inp);
            var outBuf = (function (f) {
                return f(inBuf);
            })(type === cryptoType.encrypt
                ? _this.encrypt64bit
                : _this.decrypt64bit);
            var out32 = _this.rip(outBuf);
            return out32;
        };
        this.encrypt64bit = function (start) {
            var outBuf = start.slice();
            for (var i = 0; i < _this.keys.length; i += 2) {
                outBuf = _this.fFunction(outBuf, _this.keys.slice(i, i + 2));
            }
            return outBuf.reverse();
        };
        this.decrypt64bit = function (start) {
            var outBuf = start.slice();
            for (var i = _this.keys.length - 2; i >= 0; i -= 2) {
                outBuf = _this.fFunction(outBuf, _this.keys.slice(i, i + 2));
            }
            return outBuf.reverse();
        };
        this.fFunction = function (inBuf, key) {
            var resultF = _this.expand(inBuf[1]);
            var newKey = key.map(function (value, index) {
                return value ^ resultF[index];
            });
            var s = _this.substitute(newKey);
            var f = _this.permute(s);
            return new Uint32Array([inBuf[1], (inBuf[0] ^ f) >>> 0]);
        };
        this.ip = function (inBuf) {
            var outL = 0;
            var outR = 0;
            for (var i = 6; i >= 0; i -= 2) {
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inBuf[1] >>> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inBuf[0] >>> (j + i)) & 1;
                }
            }
            for (var i = 6; i >= 0; i -= 2) {
                for (var j = 1; j <= 25; j += 8) {
                    outR <<= 1;
                    outR |= (inBuf[1] >>> (j + i)) & 1;
                }
                for (var j = 1; j <= 25; j += 8) {
                    outR <<= 1;
                    outR |= (inBuf[0] >>> (j + i)) & 1;
                }
            }
            return new Uint32Array([outL >>> 0, outR >>> 0]);
        };
        this.rip = function (inBuf) {
            var outL = 0;
            var outR = 0;
            for (var i = 0; i < 4; i += 1) {
                for (var j = 24; j >= 0; j -= 8) {
                    outL <<= 1;
                    outL |= (inBuf[1] >>> (j + i)) & 1;
                    outL <<= 1;
                    outL |= (inBuf[0] >>> (j + i)) & 1;
                }
            }
            for (var i = 4; i < 8; i += 1) {
                for (var j = 24; j >= 0; j -= 8) {
                    outR <<= 1;
                    outR |= (inBuf[1] >>> (j + i)) & 1;
                    outR <<= 1;
                    outR |= (inBuf[0] >>> (j + i)) & 1;
                }
            }
            return new Uint32Array([outL >>> 0, outR >>> 0]);
        };
        this.expand = function (r) {
            var outL = 0;
            var outR = 0;
            outL = ((r & 1) << 5) | (r >>> 27);
            for (var i = 23; i >= 15; i -= 4) {
                outL <<= 6;
                outL |= (r >>> i) & 0x3f;
            }
            for (var i = 11; i >= 3; i -= 4) {
                outR |= (r >>> i) & 0x3f;
                outR <<= 6;
            }
            outR |= ((r & 0x1f) << 1) | (r >>> 31);
            return new Uint32Array([outL >>> 0, outR >>> 0]);
        };
        this.substitute = function (inbuf) {
            var sTable = new Uint8Array([
                14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
                3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
                4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
                15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,
                15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
                9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
                0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
                5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,
                10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
                1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
                13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
                11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,
                7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
                1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
                10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
                15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,
                2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
                8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
                4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
                15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,
                12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
                0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
                9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
                7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,
                4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
                3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
                1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
                10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,
                13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
                10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
                7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
                0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11,
            ]);
            var out = 0;
            for (var i = 0; i < 4; i += 1) {
                var b = (inbuf[0] >>> (18 - i * 6)) & 0x3f;
                var sb = sTable[i * 0x40 + b];
                out <<= 4;
                out |= sb;
            }
            for (var i = 0; i < 4; i += 1) {
                var b = (inbuf[1] >>> (18 - i * 6)) & 0x3f;
                var sb = sTable[4 * 0x40 + i * 0x40 + b];
                out <<= 4;
                out |= sb;
            }
            return out >>> 0;
        };
        this.permute = function (num) {
            var out = 0;
            var permuteTable = new Uint8Array([
                16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
                30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7,
            ]);
            for (var i = 0; i < permuteTable.length; i += 1) {
                out <<= 1;
                out |= (num >>> permuteTable[i]) & 0x1;
            }
            return out >>> 0;
        };
        if (key.length !== this.blockSize) {
            throw new Error('Invalid key length');
        }
        var shiftTable = new Uint8Array([
            1, 1, 2, 2, 2, 2, 2, 2,
            1, 2, 2, 2, 2, 2, 2, 1,
        ]);
        var key32 = tac.uint8toUint32(key);
        var resultPc1 = this.pc1(key32);
        var _loop_1 = function (i) {
            var shift = shiftTable[i >>> 1];
            resultPc1 = resultPc1.map(function (value) {
                return _this.r28shl(value, shift);
            });
            this_1.keys.set(this_1.pc2(resultPc1), i);
        };
        var this_1 = this;
        for (var i = 0; i < this.keys.length; i += 2) {
            _loop_1(i);
        }
    }
    return DES;
}());
exports.DES = DES;
//# sourceMappingURL=index.js.map