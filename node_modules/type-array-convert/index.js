"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var uint8toUint32Nocheck = function (data) {
    var out = new Uint32Array(data.length / 4);
    var off = 0;
    for (var i = 0; i < out.length; i += 1) {
        var res = (data[0 + off] << 24) |
            (data[1 + off] << 16) |
            (data[2 + off] << 8) |
            data[3 + off];
        out[i] = res >>> 0;
        off += 4;
    }
    return out;
};
var uint8toUint16Nocheck = function (data) {
    var out = new Uint16Array(data.length / 2);
    var off = 0;
    for (var i = 0; i < out.length; i += 1) {
        var res = (data[0 + off] << 8) |
            data[1 + off];
        out[i] = res >>> 0;
        off += 4;
    }
    return out;
};
var uint16toUint32Nocheck = function (data) {
    var out = new Uint32Array(data.length / 2);
    var off = 0;
    for (var i = 0; i < out.length; i += 1) {
        var res = (data[0 + off] << 16) |
            data[1 + off];
        out[i] = res >>> 0;
        off += 4;
    }
    return out;
};
exports.uint8toUint32ZeroPadding = function (data) {
    var mod = data.length % 4;
    if (mod !== 0) {
        var data2 = new Uint8Array(data.length - mod + 4);
        data2.set(data, 4 - mod);
        return uint8toUint32Nocheck(data2);
    }
    return uint8toUint32Nocheck(data);
};
exports.uint8toUint16ZeroPadding = function (data) {
    var mod = data.length % 2;
    if (mod !== 0) {
        var data2 = new Uint8Array(data.length - mod + 2);
        data2.set(data, 2 - mod);
        return uint8toUint16Nocheck(data2);
    }
    return uint8toUint16Nocheck(data);
};
exports.uint16toUint32ZeroPadding = function (data) {
    var mod = data.length % 2;
    if (mod !== 0) {
        var data2 = new Uint16Array(data.length - mod + 2);
        data2.set(data, 2 - mod);
        return uint16toUint32Nocheck(data2);
    }
    return uint16toUint32Nocheck(data);
};
exports.uint8toUint32 = function (data) {
    if (data.length % 4 !== 0) {
        new Error('');
    }
    return uint8toUint32Nocheck(data);
};
exports.uint8toUint16 = function (data) {
    if (data.length % 2 !== 0) {
        new Error('');
    }
    return uint8toUint16Nocheck(data);
};
exports.uint16toUint32 = function (data) {
    if (data.length % 2 !== 0) {
        new Error('');
    }
    return uint16toUint32Nocheck(data);
};
exports.uint16toUint8 = function (data) {
    var out = new Uint8Array(data.length * 2);
    var off = 0;
    for (var i = 0; i < data.length; i += 1) {
        out[0 + off] = data[i] >>> 8;
        out[1 + off] = data[i] & 0xff;
        off += 2;
    }
    return out;
};
exports.uint32toUint16 = function (data) {
    var out = new Uint16Array(data.length * 2);
    var off = 0;
    for (var i = 0; i < data.length; i += 1) {
        out[0 + off] = data[i] >>> 16;
        out[1 + off] = data[i] & 0xffff;
        off += 2;
    }
    return out;
};
exports.uint32toUint8 = function (data) {
    var out = new Uint8Array(data.length * 4);
    var off = 0;
    for (var i = 0; i < data.length; i += 1) {
        out[0 + off] = data[i] >>> 24;
        out[1 + off] = (data[i] >>> 16) & 0xff;
        out[2 + off] = (data[i] >>> 8) & 0xff;
        out[3 + off] = data[i] & 0xff;
        off += 4;
    }
    return out;
};
//# sourceMappingURL=index.js.map